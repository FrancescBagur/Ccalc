package com.educem.eyecalc.androideyecalc;

import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;

public class MainActivity extends AppCompatActivity {
    //variables per la camara.
    private static final int CAM_REQUEST = 1313;
    Button SCAN;    //boto que obrira la camara per fer la foto.
    //variables per la imatge, tractarla i enviarla.
    Bitmap bmpInvertit; //aqui es guardar la imatge invertida en format BMP.
    private byte[] imgbyte; //aqui es guardarà la imatge en bytes.
    private final String token= "Ccalc\n"; //token per enviar al servidor perque validi la conexió
    private static final String SERVER_ADRESS="192.168.0.161"; //ip del servidor (SOCKETS).
    //altres.
    Intent intentResult;  //intent que obrira la activity per mostra el resultat.

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //estableix la part visual feta graficament, codi autogenerated.
        setContentView(R.layout.activity_main);
        //les dues instruccions seguents posan la pantalla en horitzontal i la blockejan perque no es pugui torna a posar vertical.
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);
        //associo el boto programatic amb el boto creat visualment per obrir la camara
        SCAN = (Button) findViewById(R.id.btScan);
        //poso un listener al boto
        SCAN.setOnClickListener(new takenfotoClicker());
    }
    //classe a que sentra quan fas click a tkfoto
    public class takenfotoClicker implements Button.OnClickListener {

        @Override
        public void onClick(View v) {
            //intent que obrira la camara i guardara la foto que es faci
            if(!isDeviceSupporCamera()) {
                Toast.makeText(getApplicationContext(), "el mòvil no te càmara", Toast.LENGTH_LONG).show();
                finish();
            }
            //si s'ha superet el if anterior vol dir que el mòvil te càmara i per tant la cridem.
            Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            //envia l'intent amb la foto feta al acticity result. la seguent funcio del codi \/ despres d'aquesta classe
            startActivityForResult(cameraIntent, CAM_REQUEST);
        }
        private boolean isDeviceSupporCamera(){
            //si el mobil te camera retorna true si no false
            if(getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) return true;
            else return false;
        }

    }
    //aqui tractare la imatge, i em comunicare amb el servidor.
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent Data) {
        super.onActivityResult(requestCode, resultCode, Data);

        if (requestCode == CAM_REQUEST) {
            if(resultCode == RESULT_OK) {
                //agafo la foto que s'ha fet
                Bitmap bmp = (Bitmap) Data.getExtras().get("data");
                //inverteixo la imatge
                Matrix m = new Matrix();
                m.preScale(1, -1);
                bmpInvertit = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), m, false);
                bmpInvertit.setDensity(DisplayMetrics.DENSITY_DEFAULT);
                //Paso la imatge a bytes.
                ByteBuffer bb = ByteBuffer.allocate(bmp.getRowBytes() * bmp.getHeight());
                bmp.copyPixelsToBuffer(bb);
                imgbyte = getBytesFromBitmap(bmp);
                //executo un thread pasant-li el valor 0, amb aixo li dic que envii un token per valida que la conexió provè de la nostra aplicació
                new enviaServerSocket(0).execute();
                //mostro missatges si el client ha cancelat la captura de la foto o si hi ha agut algun error.
            } else if (resultCode == RESULT_CANCELED) Toast.makeText(getApplicationContext(), "captura cancelada per l'usuari", Toast.LENGTH_LONG).show();
            else Toast.makeText(getApplicationContext(), "error en capturar la imatge, torna a provar.", Toast.LENGTH_LONG).show();
        }
    }
    //el crida la funció anterior rep un bitmap i el retorna en bytes.
    public byte[] getBytesFromBitmap(Bitmap bitmap) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
        return stream.toByteArray();
    }
    //Thread per enviar info al server 0-> enviar token de validació 1-> enviar la imatge feta.
    public class enviaServerSocket extends AsyncTask<Void, Void, Void> {
        int operacio; //m'indica l'operacio que tinc de fer.
        DataOutputStream out; //canal de sortida per enviar el token.
        OutputStream outImg; //canal de sortida per enviar la imatge.
        private Socket s;
        //en el constructor inicialitzo les variables.
        public enviaServerSocket(int operacio) {
            this.operacio = operacio;
        }
        //en funcio del parametre rebut faig una cosa o un altra.
        protected Void doInBackground(Void... params) {
            try {
                s = new Socket(SERVER_ADRESS,2010);
                out = new DataOutputStream(s.getOutputStream());
                outImg = s.getOutputStream();
                //executo un thread per escoltar al servidor per si m'envia informació
                new escoltaServerSocket(s).execute();
            } catch (IOException e) {
                e.printStackTrace();
            }
            switch (operacio){
                case 0:
                    try {
                        //envio el token
                        out.writeBytes(token);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
                case 1:
                    try {
                        //envio la imatge en bytes i tanco el socket, important perque rebi la imatge correctament.
                        outImg.write(imgbyte);
                        outImg.flush();
                        s.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    break;
            }
            return null;
        }
    }
    //thread per rebre info del server
    public class escoltaServerSocket extends AsyncTask <Void, Void, Void> {
        private Socket s;
        public escoltaServerSocket(Socket s) {
            this.s=s;
        }

        @Override
        protected Void doInBackground(Void... params) {
            try {
                //obro canal de comunicació per rebre dades del servidor
                BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
                String missatge;
                //quan es rep algo s'entra al while i es tracta la informació rebuda amb la funcio tractar dades.
                while((missatge = in.readLine()) != null) {
                    tractaDades(missatge);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
        //actua en funció de les dades rebudes per el servidor.
        private void tractaDades(String msg){
            //si m'ha enviat un OK vol dir que el token es correcte i per tant espera a que li envii la imatge
            //si ok crido a un thread passantlli 1 de parametre perque envii la foto al servidor.
            if(msg.trim().equals("OK")) new enviaServerSocket(1).execute();
        }
    }
    /*
    //aquesta clase envia la foto a una API, alternativa als sockets.
    public class uploadFile extends AsyncTask <Void, Void, Void> {
        @Override
        protected Void doInBackground(Void... params) {
            //intanciem un byteArrayOutputStream
                //ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            //comprimim la imatge en format JPEG amb cualitat 100 i la guardem al byteArrayOutputStream anterior
                //bmpInvertit.compress(Bitmap.CompressFormat.JPEG, 100, byteArrayOutputStream);
            //codifiquem la imatge en base64
                //String encodedImage = Base64.encodeToString(byteArrayOutputStream.toByteArray(), Base64.DEFAULT);
            //Intent de pasar la imatge a bytes sense fer el compress
                ByteBuffer bb = ByteBuffer.allocate(bmpInvertit.getRowBytes() * bmpInvertit.getHeight());
                bmpInvertit.copyPixelsToBuffer(bb);
                byte[] imgBytes = bb.array();
                String encodedImage = Base64.encodeToString(imgBytes,Base64.DEFAULT);
            //creem un arraylist i li afegim les dades que volem enviar al server.
            ArrayList<NameValuePair> dataToSend = new ArrayList<>();
            dataToSend.add(new BasicNameValuePair("image", encodedImage));
            dataToSend.add(new BasicNameValuePair("name", "primeraImgPalserver"));
            //instanciem la conexio aki perque el finally la pugui desconectar
            try {
                URL url = new URL(SERVER_ADRESS + "index.php");  //inicialitzem una conexió amb el servidor
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection(); //obrim la conexió amb el servidor
                try {
                    urlConnection.setDoOutput(true);    //obrim connexio amb el servidor
                    urlConnection.setChunkedStreamingMode(0); //serveix per evitar alguns errors
                    OutputStream out = new BufferedOutputStream(urlConnection.getOutputStream()); //crea un outputStream per enviar dades al server amb la seguent instruccio
                    out.write(dataToSend.get(0).getValue().getBytes());
                    InputStream in = new BufferedInputStream(urlConnection.getInputStream()); //agafa les possibles dades que pugui retornar el servidor

                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    urlConnection.disconnect();
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
    }
    */
    //metodes autogenerats per el ANDROID STUDIO.
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }


}
